(dirs tools client gen assets static local)

(library
 (name myapp)
 (modules
  (:standard \ Myapp_main))
 (libraries eliom.server ocsipersist-sqlite ocsipersist-sqlite.settings)
 (library_flags
  (:standard -linkall))
 (wrapped false)
 (preprocess
  (pps
   lwt_ppx
   ;   pgocaml_ppx
   js_of_ocaml-ppx_deriving_json
   ;   ocsigen-i18n
   ocsigen-ppx-rpc
   eliom.ppx.server
   --
   --rpc-raw
   ;   --prefix
   ;   Myapp_
   ;   --suffix
   ;   _i18n
   ;   --default-module
   ;   Myapp_i18n
   )))

(executables
 (names myapp_main)
 (public_names myapp)
 (modes
  (byte exe)
  (native exe))
 (libraries
  eliom.server
  ocsipersist-sqlite
  ocsigenserver.ext.staticmod
  myapp)
 (modules Myapp_main)
 (preprocess
  (pps
   lwt_ppx
   ;   pgocaml_ppx
   js_of_ocaml-ppx_deriving_json
   ;   ocsigen-i18n
   ocsigen-ppx-rpc
   eliom.ppx.server
   ;   --
   ;   --prefix
   ;   Myapp_
   ;   --suffix
   ;   _i18n
   ;   --default-module
   ;   Myapp_i18n
   )))

;(rule
; (target myapp_i18n.eliom)
; (deps assets/myapp_i18n.tsv)
; (action
;  (with-stdout-to
;   %{target}
;   (with-stdin-from
;    %{deps}
;    (pipe-stdout
;     (run
;      ocsigen-i18n-generator
;      --languages
;      en,fr
;      --default-language
;      fr
;      %{deps})
;     (run
;      sed
;      "1 s/]/[@@deriving json]]\\n[%%shared [@@@ocaml.warning\"-27\"]]/"))))))

(subdir
 gen
 (rule
  (deps ../tools/gen_dune.ml)
  (action
   (with-stdout-to
    dune.client
    (run ocaml ../tools/gen_dune.ml)))))

(subdir
 client
 (executables
  (names myapp)
  (modes js byte)
  (preprocess
   (pps
    js_of_ocaml-ppx
    lwt_ppx
    ;    ocsigen-i18n
    ;    --
    ;    --prefix
    ;    Myapp_
    ;    --suffix
    ;    _i18n
    ;    --default-module
    ;    Myapp_i18n
    ))
  (js_of_ocaml
   (build_runtime_flags :standard --enable use-js-string)
   (flags
    :standard
    --enable
    with-js-error
    --enable
    use-js-string
    --no-source-map))
  ; source maps are slow...
  (libraries eliom.client))
 (dynamic_include ../gen/dune.client))

; Main rule:

(rule
 (alias myapp)
 (deps
  myapp.cma
  myapp_main.bc
  myapp_main.exe
  client/myapp.bc
  client/myapp.bc.js
  tools/check_modules.ml)
 (action
  (run ocaml -I +unix -I +str tools/check_modules.ml myapp)))
